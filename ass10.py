# -*- coding: utf-8 -*-
"""ass10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AEKKBXhBBjiVPVlIKULfksKv9Dr-bddi
"""

import numpy as np
import cv2
import tensorflow as tf

# Load the pre-trained model
model_path = 'ssd_mobilenet_v2.pb'  # Replace with the path to your model
model = tf.saved_model.load(model_path)

# Load the labels
labels_path = 'label_map.pbtxt'  # Replace with the path to your labels file
with open(labels_path, 'r') as f:
    labels = {int(line.split(': ')[1]): line.split(': ')[0] for line in f.readlines()}

# Function to perform object detection
def detect_objects(image, model):
    input_tensor = tf.convert_to_tensor(image)
    input_tensor = input_tensor[tf.newaxis,...]

    detections = model(input_tensor)

    return detections

# Function to draw bounding boxes
def draw_boxes(image, detections):
    height, width, _ = image.shape

    for i in range(int(detections.pop('num_detections'))):
        score = detections['detection_scores'][i].numpy()
        if score < 0.5:
            continue

        box = detections['detection_boxes'][i].numpy()
        ymin, xmin, ymax, xmax = box

        left, right, top, bottom = (xmin * width, xmax * width,
                                    ymin * height, ymax * height)

        label = labels[int(detections['detection_classes'][i].numpy())]

        cv2.rectangle(image, (int(left), int(top)), (int(right), int(bottom)), (255, 0, 0), 2)
        cv2.putText(image, label, (int(left), int(top) - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)

    return image

# Load an image
image_path = 'path_to_your_image.jpg'  # Replace with the path to your image
image = cv2.imread(image_path)

# Perform object detection
detections = detect_objects(image, model)

# Draw bounding boxes
output_image = draw_boxes(image, detections)

# Display the image
cv2.imshow('Object Detection', output_image)
cv2.waitKey(0)
cv2.destroyAllWindows()